orbs:
  slack: circleci/slack@3.4.2 # Module for CircleCI integration with Slack

version: 2.1

executors: # Putting docker configurtion in one place
  app-executor:
    docker:
      - image: circleci/node:latest
    working_directory: ~/repo # this is the directory where circleci docker image will be added
  slack-executor:
    docker:
      - image: cibuilds/base:latest # This is an cibuild image
    resource_class: small
  docker-publisher:
    environment:
      IMAGE_NAME: sumitgovilstudy/movie-watch-list
    docker:
      - image: circleci/buildpack-deps:stretch

aliases: #commands which are executed at multiple places
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH} # Comes from circle ci
  - &restore-cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }} # If exists
        - app- # if doesn't exist, we will save the cache
  - &install-dependencies
    run:
      name: Install dependencies
      command: npm install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }} # save node_modules in cache
  - &install-aws-cli
    run:
      name: Install AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python-pip python-dev build-essential
  - &build-project
    run:
      name: Build project
      command: |
        npm install
        npm run build
        cd build
        zip ../build.zip -r *.[^.]*
        echo "Build successful"
jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache

  linting:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run linting
          command: npm run lint

  prettier:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run prettier check
          command: npm run prettier:check

  unit-test:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run unit unit
          command: npm run test

  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS S3
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_PROD} --delete
            elif [ "${CIRCLE_BRANCH}" == "stage" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_STAGE} --delete
            elif [ "${CIRCLE_BRANCH}" == "dev" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_DEV} --delete
            fi
  deploy-to-aws-cloudfront:
    executor: app-executor
    steps:
      # - checkout
      - *show-current-branch-name
      - *install-aws-cli
      # - *build-project
      - run:
          name: Invalidate and Deploy to AWS Cloudfront
          command: |
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws cloudfront create-invalidation  --distribution-id ${AWS_DISTRIBUTION_ID_PROD} --paths /\*
            elif [ "${CIRCLE_BRANCH}" == "stage" ]
            then
              aws cloudfront create-invalidation  --distribution-id ${AWS_DISTRIBUTION_ID_STAGE} --paths /\*
            elif [ "${CIRCLE_BRANCH}" == "dev" ]
            then
              aws cloudfront create-invalidation  --distribution-id ${AWS_DISTRIBUTION_ID_DEV} --paths /\*
            fi
  notify-via-slack:
    executor: slack-executor
    steps:
      - slack/notify:
          message: '${CIRCLE_BRANCH} branch deployment to AWS S3 and Cloudfront is complete.'
          webhook: $CIRCLECI_SLACK_WEBHOOK
      - slack/status:
          webhook: $CIRCLECI_SLACK_WEBHOOK

  publish-to-docker-hub:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - *restore-cache
      - run: docker login -u "${DOCKER_HUB_USER}" -p "${DOCKER_HUB_PASSWORD}"
      - run: docker build -t ${IMAGE_NAME}:latest .
      - run:
          name: Tag and push to docker hub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:stable-${CIRCLE_BUILD_NUM} && docker push ${IMAGE_NAME}:stable-${CIRCLE_BUILD_NUM}
            elif [ "${CIRCLE_BRANCH}" == "stage" ]
            then
              docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:staging-${CIRCLE_BUILD_NUM} && docker push ${IMAGE_NAME}:staging-${CIRCLE_BUILD_NUM}
            else
              docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:dev-${CIRCLE_BUILD_NUM} && docker push ${IMAGE_NAME}:dev-${CIRCLE_BUILD_NUM}
            fi
workflows:
  build_and_deploy:
    jobs:
      - build
      - linting:
          requires:
            - build
      - prettier:
          requires:
            - build
      - unit-test:
          requires:
            - build
      - publish-to-docker-hub:
          requires:
            - prettier
            - linting
            - unit-test
          filters:
            branches:
              only:
                - stage
                - master
      - deploy-to-aws-s3:
          requires:
            - prettier
            - linting
            - unit-test
          filters:
            branches:
              only:
                - stage
                - master
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - master
      - notify-via-slack:
          requires:
            - deploy-to-aws-cloudfront
            - deploy-to-aws-s3
            - prettier
            - linting
            - unit-test
          filters:
            branches:
              only:
                - dev
                - stage
                - master
